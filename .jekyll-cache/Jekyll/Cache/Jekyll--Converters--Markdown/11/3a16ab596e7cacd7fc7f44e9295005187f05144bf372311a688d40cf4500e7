I"L<p>There are two philosophies when it comes to package installation, global first and local first. Global meaning all applications that rely on a certain package have access to the same copy of the library that was installed once. Local means that each project has its own folder of dependencies installed specifically for this project and each library is installed many times. NPM, for example, uses local first strategy. Pip in Python uses global first strategy by default.</p>

<p>Both approaches have their benefits and drawbacks. In this post I wanted to show how to use a Python library called virtualenv to created isolated (local) python environments.</p>

<p>virtualenv is used to manage Python packages for different projects. Using virtualenv allows you to avoid installing Python packages globally which could break system tools or other projects. You can install virtualenv using pip.</p>

<p>Installing virtualenv:
As usual, it’s as simple as:</p>

<p>On macOS and Linux:</p>

<p>python3 -m pip install –user virtualenv
On Windows:</p>

<p>py -m pip install –user virtualenv</p>

:ET