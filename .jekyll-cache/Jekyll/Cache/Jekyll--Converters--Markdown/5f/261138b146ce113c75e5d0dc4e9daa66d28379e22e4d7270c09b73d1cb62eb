I"U<h2 id="how-to-use-charles-proxy-to-rewrite-https-traffic-for-web-applications">How to use Charles Proxy to rewrite HTTPS traffic for web applications</h2>

<h3 id="rewriting-traffic-with-breakpoints">Rewriting traffic with Breakpoints</h3>

<p>Now that we can inspect both HTTP and HTTPS traffic, we can start rewriting responses. The quickest way to achieve this is to use a Breakpoint. These are set up for specific resources (or Locations as they’re called in Charles Proxy) and will pause the response for us to modify before it reaches the client.</p>

<p>You can right click on any level of the resource tree structure to create a breakpoint.</p>

<p><img src="../../../../img/CharlesProxy/breakpoints.png" alt="alt text" /></p>

<p>Without any dialogs or notification, this creates a Request &amp; Response breakpoint. You can see the entry (and future ones) from Breakpoint Settings found in the Proxy menu bar item. If you don’t want to pause for requests (I have never needed this), you can configure the breakpoint to be only for responses - double click on the breakpoint entry and uncheck Request.</p>

<p><img src="../../../../img/CharlesProxy/edit-breakpoint.png" alt="alt text" /></p>

<p>The next time you make a request that matches the URL, Charles will show a new tab listing the responses and/or requests queued up. This queue can quickly become overwhelming if your matcher is too greedy, shows both requests and responses or that the site is making regular poll requests. The Status row will be helpful in determining what’s going.</p>

<p><img src="../../../../img/CharlesProxy/breakpoint-status.png" alt="alt text" /></p>

<p>From within this tab, you can edit everything about the response: headers, cookies, JSON/HTML, etc. using the Edit Response subtab. Try changing the page’s response body using the different views available.</p>

<p>After you’ve edited something, you have a choice of actions to take:</p>

<p>Execute applies the changes and allow the response to reach its destination,
Cancel discards your changes but continues to send the response,
Abort kills the response, simulating a network failure.</p>

<p><img src="../../../../img/CharlesProxy/breakpoints-rewrite.png" alt="alt text" /></p>

<p>Rewriting traffic with the Rewrite tool
Breakpoints are a quick way to rewrite payloads and modify status codes, but it becomes time consuming for responses you want to modify the same way each time. Thankfully, Charles has other features to make this easier. One of them is called Rewrite and they can be used to modify almost everything about the request and/or response, without interuption and for each time they’re made.</p>

<p>We’ll use a Rewrite to modify the JSON body from https://reqres.in/api/users/1 (actual response shown below). Remember to setup a SSL Proxying setting for this new host.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Use Charles Proxy HTTP Proxy (default port 8888) to pick up the request from cURL
$ curl --proxy localhost:8888 -s https://reqres.in/api/users/1 | jq .
{
  "data": {
    "id": 1,
    "first_name": "George",
    "last_name": "Bluth",
    "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"
  }
}
</code></pre></div></div>

<p>First, copy the full URL of the endpoint and navigate to Rewrite from the Tools menu bar item. Enable Rewrite setting and add a new set. Then add a Location (URL) that defines the set. Paste the URL to the Host field and hit Tab ⇥ to auto deconstruct the URL into the relevant fields.</p>

<p><img src="../../../../img/CharlesProxy/rewrite.png" alt="alt text" /></p>

<p>Now we can add a Rewrite Rule to change the JSON response body to {“foo”:”bar”}.</p>

<p><img src="../../../../img/CharlesProxy/rewrite-json.png" alt="alt text" /></p>

<p>The Match regex used here is optional for this particular example, but you may find it useful in the future to target only JSON-like responses. You may want to use this if you have CORS preflight requests that you don’t want to modify. Thanks to Austin on Stackoverflow for this workaround.</p>

<p>After the Rewrite Rule has been added, be sure to Apply the changes and make the request again. If you’ve used a browser to make these requests, you may need to force reload or disable cache. For our cURL output, we now have our modified response instead of the original:</p>

<p>```
$ curl –proxy localhost:8888 -s https://reqres.in/api/users/1 | jq .
{
  “foo”: “bar”
}</p>

<h4 id="references">References:</h4>
<p>1.<a href="https://www.adopsinsider.com/ad-ops-tools/charles-proxy-advanced/">All features explanation</a></p>
:ET