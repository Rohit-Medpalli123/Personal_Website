I"À
<p>How adb Works?
When you start an adb client, the client first checks whether there is an adb server process already running. If there isn‚Äôt, it starts the server process. When the server starts, it binds to local TCP port 5037 and listens for commands sent from adb clients ‚Äî all adb clients use port 5037 to communicate with the adb server.
The server then sets up connections to all running devices. It locates emulators by scanning odd-numbered ports in the range 5555 to 5585, the range used by the first 16 emulators. Where the server finds an adb daemon (adbd), it sets up a connection to that port. Note that each emulator uses a pair of sequential ports ‚Äî an even-numbered port for console connections and an odd-numbered port for adb connections. For example:
Emulator 1, console: 5554
Emulator 1, adb: 5555
Emulator 2, console: 5556
Emulator 2, adb: 5557
and so on‚Ä¶</p>

<p>As shown, the emulator connected to adb on port 5555 is the same as the emulator whose console listens on port 5554.
Once the server has set up connections to all devices, you can use adb commands to access those devices. Because the server manages connections to devices and handles commands from multiple adb clients, you can control any device from any client (or from a script).</p>

<p>adb Components:
adb is an application that consists of four major components:</p>

<p>A client that sends commands to the connected Android device. This is the shell command adb that runs on your dev machine.</p>

<p>A daemon (adbd) that runs as a background process on a device and handles the execution of received commands.</p>

<p>A server that handles communication between the client and the daemon. The server runs as a background process on your dev machine and is started the first time you use the adb command.</p>

<p>A service  that runs in the background.</p>

<p>As a whole, everything works through the following components:</p>

<p>ADB command-line client:- The ‚Äòadb‚Äô command-line program is used to run adb commands from a shell or a script. It first tries to locate the ADB server on the host machine, and will start one automatically if none is found. Then, the client sends its service requests to the ADB server. Currently, a single ‚Äòadb‚Äô binary is used for both the server and client. this makes distribution and starting the server easier.</p>

<p>ADB server:- This is a background process that runs on the host machine. Its purpose is to sense the USB ports to know when devices are attached/removed, as well as when emulator instances start/stop. It thus maintains a list of ‚Äúconnected devices‚Äù and assigns a ‚Äòstate‚Äô to each one of them: OFFLINE, BOOTLOADER, RECOVERY or ONLINE (more on this below). The ADB server is really one giant multiplexing loop whose purpose is to orchestrate the exchange of data (packets, really) between clients, services and devices.</p>

<p>ADB daemon (adbd):- The ‚Äòadbd‚Äô program runs as a background process within an Android device or emulated system. Its purpose is to connect to the ADB server (through USB for devices, through TCP for emulators) and provide a few services for clients that run on the host. The ADB server considers that a device is ONLINE when it has successfully connected to the adbd program within it. Otherwise, the device is OFFLINE, meaning that the ADB server detected a new device/emulator, but could not connect to the adbd daemon. The BOOTLOADER and RECOVERY states correspond to alternate states of devices when they are in the bootloader or recovery mode.</p>

<p>Services:- There are essentially two kinds of services that a client can talk to.</p>

<p>Host Services: These services run within the ADB Server and thus do not need to communicate with a device at all. A typical example is ‚Äúadb devices‚Äù which is used to return the list of currently known devices and their states. They are a few other services though.</p>

<p>Local Services: These services either run within the adbd daemon, or are started by it on the device. The ADB server is used to multiplex streams between the client and the service running in adbd. In this case its role is to initiate the connection, then of being a pass-through for the data.</p>

<p>adb Protocols
These components communicate via TCP/IP protocol. When you invoke the adb command, the client first checks to see if the adb server is already running. If not, the server is started. After starting, the server sets up connections to adbd daemons on all connected devices. Once the connection is started, you can use adb commands to control these devices.</p>

<p>adb uses two major protocols:</p>

<p>Client &lt;-&gt; Server protocol: This details the protocol used between ADB clients and the ADB server itself. The ADB server listens on TCP:localhost:5037.</p>

<p>Transports: An ADB transport model a connection between the ADB server and one device or emulator. There are currently two kinds of transports:</p>

<p>‚Äî USB transports, for physical devices through USB</p>

<p>‚Äî Local transports, for emulators running on the host, connected to the server through TCP</p>

<p>Enable adb Debugging
To use ADB with your Android device, you must enable a feature called USB debugging. Open your phone‚Äôs app drawer, tap the Settings icon, and select About Phone. Scroll all the way down and tap the Build Number item seven times. You should get a message saying you are now a developer.</p>

<p>Head back to the main Settings page, and you should see a new option near the bottom called Developer Options. Open that, and enable USB Debugging.</p>

<p>Later on, when you connect your phone to your computer, you‚Äôll see a popup entitled Allow USB Debugging? on your phone. Check the Always allow from this computer box and tap OK.</p>

<p>Reference:
Android Debug Bridge Fundamentals</p>

:ET