I"™<p>Overview
Cross-site Scripting (XSS) is a client-side code injection attack. The attacker aims to execute malicious scripts in a web browser of the victim by including malicious code in a legitimate web page or web application. The actual attack occurs when the victim visits the web page or web application that executes the malicious code. The web page or web application becomes a vehicle to deliver the malicious script to the user‚Äôs browser. Vulnerable vehicles that are commonly used for Cross-site Scripting attacks are forums, message boards, and web pages that allow comments.
A web page or web application is vulnerable to XSS if it uses unsanitized user input in the output that it generates. This user input must then be parsed by the victim‚Äôs browser.</p>

<p>‚ÄúIsn‚Äôt Cross-site Scripting the User‚Äôs Problem?‚Äù
If an attacker can abuse an XSS vulnerability on a web page to execute arbitrary JavaScript in a user‚Äôs browser, the security of that vulnerable website or vulnerable web application and its users has been compromised. XSS is not the user‚Äôs problem like any other security vulnerability. If it is affecting your users, it affects you.</p>

<p>Cross-site Scripting may also be used to deface a website instead of targeting the user. The attacker can use injected scripts to change the content of the website or even redirect the browser to another web page, for example, one that contains malicious code.</p>

<p>Description
Cross-Site Scripting (XSS) attacks occur when:</p>

<p>1.Data enters a Web application through an untrusted source, most frequently a web request.
2.The data is included in dynamic content that is sent to a web user without being validated for malicious content.
The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash, or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data, like cookies or other session information, to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user‚Äôs machine under the guise of the vulnerable site.</p>

<p>Stored and Reflected XSS Attacks
XSS attacks can generally be categorized into two categories: stored and reflected. There is a third, much less well-known type of XSS attack called DOM Based XSS that is discussed separately here.</p>

<p>Stored XSS Attacks
Consider a web application that allows users to enter a username that is displayed on each user‚Äôs profile page. The application stores each username in a local database. A malicious user notices that the web application fails to sanitize the username field and inputs malicious JavaScript code as part of their username. When other users view the attacker‚Äôs profile page, the malicious code automatically executes in the context of their session</p>

<p>Reflected XSS Attacks
There are many ways in which an attacker can entice a victim into initiating a reflective XSS request. For example, the attacker could send the victim a misleading email with a link containing malicious JavaScript. If the victim clicks on the link, the HTTP request is initiated from the victim‚Äôs browser and sent to the vulnerable web application. The malicious JavaScript is then reflected back to the victim‚Äôs browser, where it is executed in the context of the victim user‚Äôs session.</p>

:ET